/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjectPlannerGUI;

import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.text.SimpleDateFormat;  
import java.util.ArrayList;
import org.apache.commons.lang3.time.StopWatch;

/**
 *
 * @author rrivera5
 */
public class ProjectPlannerGUI extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeTable
     */
    
    //Creates an object for the rows of the table
    public Object [] rows = new Object[5];
    
    //Creates an arraylist to hold StopWatch Values
        //Note: Stopwatches allow the employee to see the time spent on projects
    public ArrayList <StopWatch> time = new ArrayList();
    
    //Sets a date format, which will be used later
    public SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    
    public ProjectPlannerGUI(){
        initComponents();
    }
    
    public static boolean isNumeric(String str) { 
        try {  
          Integer.parseInt(str);  
          return true;
        } catch(NumberFormatException e){  
          return false;  
        }  
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableA = new javax.swing.JTable();
        txtProjects = new javax.swing.JTextField();
        txtProgress = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPay = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablePayA = new javax.swing.JTable();
        btnPay = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableE = new javax.swing.JTable();
        btnUpdateProgress = new javax.swing.JButton();
        txtUpdate = new javax.swing.JTextField();
        btnGetTime = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePayE = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Projects", "Progress", "Starting Date", "Deadline", "Submitted"
            }
        ));
        tableA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableA);

        txtProgress.setText("0");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Admin");

        jLabel4.setText("Payment:");

        tablePayA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Projects", "Payment", "Deadline", "Submitted"
            }
        ));
        jScrollPane4.setViewportView(tablePayA);

        btnPay.setText("Send");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        jLabel5.setText("Deadline:");

        jLabel6.setText("Progress:");

        jLabel7.setText("Projects:");

        jLabel8.setText("Employee's Completed Projects:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(102, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5)
                            .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(txtProjects, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(btnAdd)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnUpdate)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnDelete)))
                                        .addGap(128, 128, 128))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtPay, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addComponent(btnPay))
                            .addComponent(jLabel7)
                            .addComponent(txtProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(6, 6, 6)
                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tableE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Projects", "Progress", "Starting Date", "Deadline", "Submitted"
            }
        ));
        jScrollPane2.setViewportView(tableE);

        btnUpdateProgress.setText("Update Progress");
        btnUpdateProgress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateProgressActionPerformed(evt);
            }
        });

        btnGetTime.setText("Time Spent");
        btnGetTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetTimeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Employee");

        tablePayE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Projects", "Payment", "Deadline", "Submitted"
            }
        ));
        jScrollPane3.setViewportView(tablePayE);

        jLabel3.setText("Completed Projects:");

        jLabel9.setText("Progress:");

        jLabel10.setText("Time:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTime, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                    .addComponent(txtUpdate))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(btnGetTime))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnUpdateProgress))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap(95, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateProgress)
                    .addComponent(txtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGetTime)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //This is where our code starts
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //Gets the table model of the admin table   
        DefaultTableModel model = (DefaultTableModel)tableA.getModel();

        //sets the model of the employee table to match the admin table
        tableE.setModel(model);

        //Used to check the text of txtProgress
        String progressText = txtProgress.getText();
        
        //Checks if the text boxes have values
        if(txtProjects.getText().equals("") || txtProgress.getText().equals("")){
            txtProjects.setText("Error");
            txtProgress.setText("Error");
        }
        
        //Checks if the text is not numeric
        else if(isNumeric(progressText) == false){
            txtProgress.setText("The progress needs to be an integer!");
        }
        
        //Checks if the text is less than 0 or greater than or equal to 100
        else if(Integer.parseInt(progressText) >= 100 || Integer.parseInt(progressText) < 0){
            txtProgress.setText("Progress cannot be at less than 0 or greater than or equal to 100!");
        }
        
        //When all the textbox values are verified, this runs
        else{
            //Sets the rows to the values of the textboxes
            rows[0] = txtProjects.getText();
            rows[1] = txtProgress.getText();
            
            //Sets the starting date in column 2 to the current date
            rows[2] = java.time.LocalDate.now();
            
            //Formats the date chosen for the deadline
            String date = sdf.format(dateChooser.getDate());
            rows[3] = date;
            
            //Creates a stopwatch so employees can track their time
            time.add(new StopWatch().createStarted());
            model.addRow(rows);
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //Gets the table model of the admin table   
        DefaultTableModel model = (DefaultTableModel)tableA.getModel();
        
        //Gets the selected row of the admin table
        int i = tableA.getSelectedRow();
        
        //This if statement checks if a row is selected
        if(i >=0){
            //removes the row
            model.removeRow(i);
            
            //removes a stopwatch from the ArrayList
            time.remove(i);
        }
        else{
            System.out.println("Delete Error: Select a row");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tableAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAMouseClicked
        //Gets the table model of the admin table   
        DefaultTableModel model = (DefaultTableModel)tableA.getModel();
        
        //Gets the selected row of the admin table
        int i = tableA.getSelectedRow();
        
        //Sets the textboxes to their respective values of the selected row
        txtProjects.setText(model.getValueAt(i, 0).toString());

    }//GEN-LAST:event_tableAMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //Gets the selected row of the admin table
        DefaultTableModel model = (DefaultTableModel)tableA.getModel();
        
        //Gets the selected row of the admin table
        int i = tableA.getSelectedRow();
        
        //Used to check the text of txtProgress
        String progressText = txtProgress.getText();
        
        //A stopwatch that gets the ArrayList's values
        //this stopwatch will be used to pause and resume the time
        StopWatch swPause = time.get(i);
        
        if(i >= 0){
            
            //if txtPojects has nothing or the error message
            if(txtProjects.getText().equals("") || txtProjects.getText().equals("Error: Set the name of the project")){
                txtProjects.setText("Error: Set the name of the project");
            }
            
            //If the text is not numeric
            else if(isNumeric(progressText) ==  false){
                txtProgress.setText("Progress needs to be an integer");
            }
            
            //If the text is greater than 100 or less than 0
            else if(Integer.parseInt(progressText) > 100 || Integer.parseInt(progressText) < 0){
                txtProgress.setText("Progress cannot be at less than 0 or greater than 100!");
            }
            
            //When everything is verified:
            else{
                //For the date/deadline chooser
                //sdf is the Simple Date Format (format: yyyy-MM-dd)
                String date = sdf.format(dateChooser.getDate());
                
                //Sets the values of the table to their respective text boxes
                model.setValueAt(txtProjects.getText(), i, 0);
                model.setValueAt(txtProgress.getText(), i, 1);
                model.setValueAt(date, i, 3);
                
                //Integer we use to check if progress is 100 or not
                int progress = Integer.parseInt(progressText);

                //If project is completed:
                if(progress == 100){ 
                    //suspend() - if the stopwatch is running, it will pause
                    //if already paused, there will be an error
                    swPause.suspend();
                    
                    //sets the stopwatch time accordingly
                    time.set(i, swPause);
                    
                    //submits the project and sets the submission date
                    model.setValueAt(java.time.LocalDate.now(), i, 4);
                }
                else{
                    //resume() - if the stopwatch is paused, it will resume
                    //if already running, there will be an error
                    swPause.resume();
                    
                    //sets the stopwatch time accordingly
                    time.set(i, swPause);
                    
                    //makes sure that the submitted date is removed from "Submitted"
                    model.setValueAt("", i, 4);
                }  
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnGetTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetTimeActionPerformed
        //Gets the selected row of the employee table
        int i = tableE.getSelectedRow();

        //Checks if a row is selected
        if(i >= 0){
            //Gets the stopwatch time and puts it into txtTime
            txtTime.setText("Row " + (i + 1) + ": "+ time.get(i));
        }
        else{
            txtTime.setText("Time Error");
        }

    }//GEN-LAST:event_btnGetTimeActionPerformed

    private void btnUpdateProgressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateProgressActionPerformed
        //Gets the model of the employee table
        DefaultTableModel model = (DefaultTableModel)tableE.getModel();
        
        //Sets the model of the admin table to be the same as the employee table
        tableA.setModel(model);
        
        //Gets the selected row of the employee table
        int i = tableE.getSelectedRow();
        
        //Used to check the text of txtUpdate (in the employee table)
        String updateText = txtUpdate.getText();
        
        //A stopwatch that gets the ArrayList's values
        //this stopwatch will be used to pause and resume the time
        StopWatch swPause = time.get(i);
        
        //Checks if a row is selected and if the text is numeric
        if(i >= 0 && isNumeric(updateText)){
            
            //Makes the text into an integer
            int update = Integer.parseInt(updateText);
            
            //Checks if the update is equal to 0 or 100, or between 0 and 100
            if(update <= 100 && update >= 0){
                
                //Sets the Progress column of the table to the value of the textbox
                model.setValueAt(txtUpdate.getText(), i, 1);
                
                //If the project is completed:
                if(update == 100){
                    //suspend() - if the stopwatch is running, it will pause
                    //if already paused, there will be an error
                    swPause.suspend();
                    
                    //sets the stopwatch time accordingly
                    time.set(i, swPause);
                    
                    //submits the project and sets the submission date
                    model.setValueAt(java.time.LocalDate.now(), i, 4);
                }
                else{
                    //resume() - if the stopwatch is paused, it will resume
                    //if already running, there will be an error
                    swPause.resume();
                    
                    //sets the stopwatch time accordingly
                    time.set(i, swPause);
                    
                    //makes sure that the submitted date is removed from "Submitted"
                    model.setValueAt("", i, 4);
                }
            }
            else{
                txtUpdate.setText("Error: Progress can only go from 0 to 100");
            }
        }
        else{
            txtUpdate.setText("Progress Update Error");
        }
        
    }//GEN-LAST:event_btnUpdateProgressActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        //Gets the models of the admin's completed projects table and the admin table
        DefaultTableModel model = (DefaultTableModel)tablePayA.getModel();
        DefaultTableModel modelA = (DefaultTableModel)tableA.getModel();
        
        //Gets the selected row of the admin table
        int i = tableA.getSelectedRow();
        
        //Sets the completed projects table of the employee to match the admin's
        tablePayE.setModel(model);
        
        //Strings made for txtPay and the 2nd column values of the admin table
        String payText = txtPay.getText();
        String progressText = (String)modelA.getValueAt(i, 1);
        
        //Checks if payText is numeric
        if(isNumeric(payText) == true){
            
            if(progressText.equals("100")){
                if(txtProjects.getText().equals("")){
                    txtPay.setText("Error: Set the name of the project");
                }
                else{
                    rows[0] = tableA.getModel().getValueAt(i, 0);
                    rows[1] = "$" + txtPay.getText();
                    rows[2] = tableA.getModel().getValueAt(i, 3);
                    rows[3] = tableA.getModel().getValueAt(i, 4);

                    
                    //Removes the row from the admin and employee tables
                    modelA.removeRow(i);
                    
                    //Removes the row's stopwatch
                    time.remove(i);
                    
                    //Adds the row to the completed projects table for both admin and employee
                    model.addRow(rows);
                }
            }
            else{
                txtPay.setText("Progress Error: Progress needs to be 100");
            }
        }
        else{
            txtPay.setText("Payment Error: You need to put in an integer!");
        }
    }//GEN-LAST:event_btnPayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectPlannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectPlannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectPlannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectPlannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProjectPlannerGUI().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetTime;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateProgress;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private static javax.swing.JTable tableA;
    private static javax.swing.JTable tableE;
    private static javax.swing.JTable tablePayA;
    private static javax.swing.JTable tablePayE;
    private javax.swing.JTextField txtPay;
    private javax.swing.JTextField txtProgress;
    private javax.swing.JTextField txtProjects;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtUpdate;
    // End of variables declaration//GEN-END:variables
}
